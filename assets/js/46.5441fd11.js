(window.webpackJsonp=window.webpackJsonp||[]).push([[46],{324:function(a,t,s){a.exports=s.p+"assets/img/25.736166b7.png"},391:function(a,t,s){"use strict";s.r(t);var r=s(30),n=Object(r.a)({},(function(){var a=this,t=a.$createElement,r=a._self._c||t;return r("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[r("h1",{attrs:{id:"算法"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#算法"}},[a._v("#")]),a._v(" 算法")]),a._v(" "),r("p",[r("img",{attrs:{src:s(324),alt:"算法"}})]),r("div",{staticClass:"table-of-contents"},[r("ul",[r("li",[r("a",{attrs:{href:"#合并二维有序数组成一维有序数组，归并排序的思路"}},[a._v("合并二维有序数组成一维有序数组，归并排序的思路")])]),r("li",[r("a",{attrs:{href:"#多种方式实现斐波那契数列"}},[a._v("多种方式实现斐波那契数列")])]),r("li",[r("a",{attrs:{href:"#字符串出现的不重复最长长度"}},[a._v("字符串出现的不重复最长长度")])]),r("li",[r("a",{attrs:{href:"#有一堆整数，请把他们分成三份，确保每一份和尽量相等（11，42，23，4，5，6-4-5-6-11-23-42-56-78-90）"}},[a._v("有一堆整数，请把他们分成三份，确保每一份和尽量相等（11，42，23，4，5，6 4 5 6 11 23 42 56 78 90）")])]),r("li",[r("a",{attrs:{href:"#输入一条-polyline，输出-polyline-的中点"}},[a._v("输入一条 polyline，输出 polyline 的中点")])]),r("li",[r("a",{attrs:{href:"#单向链表实现队列"}},[a._v("单向链表实现队列")])]),r("li",[r("a",{attrs:{href:"#将给定的数组从顶级分类递归查找子分类，最终构建一个树状数组"}},[a._v("将给定的数组从顶级分类递归查找子分类，最终构建一个树状数组")])]),r("li",[r("a",{attrs:{href:"#实现一个将-52-张牌随机均等的分给四个人，比如输入-0-1-2-3-51-，输出-1-2-16-4-3-6"}},[a._v("实现一个将 52 张牌随机均等的分给四个人，比如输入 [0,1,2,3....51] ，输出[[1,2,16...],[4,3,6..],[....],[....]]")])]),r("li",[r("a",{attrs:{href:"#按要求实现-rightview-函数"}},[a._v("按要求实现 rightView 函数")])]),r("li",[r("a",{attrs:{href:"#二叉树序列化反序列化"}},[a._v("二叉树序列化反序列化")])]),r("li",[r("a",{attrs:{href:"#输入一个数字，找到对应的字母"}},[a._v("输入一个数字，找到对应的字母")])]),r("li",[r("a",{attrs:{href:"#给一个字符串比如-abca-，返回第一个不重复的字母"}},[a._v("给一个字符串比如'abca'，返回第一个不重复的字母")])]),r("li",[r("a",{attrs:{href:"#给定⼀个只包括-，-，-，-，-，-的字符串，判断字符串是否有效"}},[a._v("给定⼀个只包括 '('，')'，'{'，'}'，'['，']' 的字符串，判断字符串是否有效.")])]),r("li",[r("a",{attrs:{href:"#手动实现一个函数，给定一个数组-1-0-2-3-4-1-3-，输出任意两个值和为-0-的下标"}},[a._v("手动实现一个函数，给定一个数组[1,0,2,3,4,-1,-3]，输出任意两个值和为 0 的下标")])]),r("li",[r("a",{attrs:{href:"#介绍排序算法和快排原理"}},[a._v("介绍排序算法和快排原理")])]),r("li",[r("a",{attrs:{href:"#一个人每次只能走一层楼梯或者两层楼梯，问走到第-80-层楼梯一共有多少种方法"}},[a._v("一个人每次只能走一层楼梯或者两层楼梯，问走到第 80 层楼梯一共有多少种方法")])]),r("li",[r("a",{attrs:{href:"#给定一个数组，形如-1-1-2-3-3-3-3-4-6-6-，给定一个数-n，例如-3，找出给定的数-n-在数组内出现的次数，要求时间复杂度小于-o-n"}},[a._v("给定一个数组，形如 [1, 1, 2 , 3, 3, 3, 3, 4, 6, 6]，给定一个数 n，例如 3，找出给定的数 n 在数组内出现的次数，要求时间复杂度小于 O(n)")])]),r("li",[r("a",{attrs:{href:"#现在有随机整数数组，例如-2-11-20-160-3-1-，请挑出数组内，三个随机整数和为-100-的所有数据。"}},[a._v("现在有随机整数数组，例如[2,11,20,160,3,1...]，请挑出数组内，三个随机整数和为 100 的所有数据。")])]),r("li",[r("a",{attrs:{href:"#统计一组整形数组的最大差值？"}},[a._v("统计一组整形数组的最大差值？")])]),r("li",[r("a",{attrs:{href:"#介绍冒泡排序、选择排序，说说冒泡排序如何优化"}},[a._v("介绍冒泡排序、选择排序，说说冒泡排序如何优化")])]),r("li",[r("a",{attrs:{href:"#如何判断链表是否有环"}},[a._v("如何判断链表是否有环")])]),r("li",[r("a",{attrs:{href:"#介绍二叉搜索树的特点"}},[a._v("介绍二叉搜索树的特点")])]),r("li",[r("a",{attrs:{href:"#手写数组去重函数-至少三种以上，说明时间复杂度"}},[a._v("手写数组去重函数(至少三种以上，说明时间复杂度)")])]),r("li",[r("a",{attrs:{href:"#找到前-k-个最大的元素"}},[a._v("找到前 K 个最大的元素")])]),r("li",[r("a",{attrs:{href:"#介绍下-dfs-深度优先"}},[a._v("介绍下 DFS 深度优先")])]),r("li",[r("a",{attrs:{href:"#递归公式的时间复杂度为？-单选题"}},[a._v("递归公式的时间复杂度为？(单选题)")])]),r("li",[r("a",{attrs:{href:"#用-javascript-实现一个标准的排序算法-快排、冒泡、选择排序-，对某个数字数组进行由低到高的排序。"}},[a._v("用 JavaScript 实现一个标准的排序算法(快排、冒泡、选择排序)，对某个数字数组进行由低到高的排序。")])]),r("li",[r("a",{attrs:{href:"#找出-aaaabbcccdddd-字符串中出现最多的字母？"}},[a._v("找出“aaaabbcccdddd”字符串中出现最多的字母？")])]),r("li",[r("a",{attrs:{href:"#求-n-以内的所有素数，并说明时间复杂度"}},[a._v("求 n 以内的所有素数，并说明时间复杂度")])]),r("li",[r("a",{attrs:{href:"#给定一个二叉树，找出其最大深度。二叉树的深度为根节点到最远叶子节点的最长路径上的节点数。说明-叶子节点是指没有子节点的节点"}},[a._v("给定一个二叉树，找出其最大深度。二叉树的深度为根节点到最远叶子节点的最长路径上的节点数。说明: 叶子节点是指没有子节点的节点")])]),r("li",[r("a",{attrs:{href:"#给定一个整数数组-nums，找到一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和"}},[a._v("给定一个整数数组 nums，找到一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和")])]),r("li",[r("a",{attrs:{href:"#根据传入参数-n-数字-对一维数组-纯数字-按照距离-n-最近的顺序排序。-距离即数字与-n-的差值的绝对值"}},[a._v("根据传入参数 n(数字)对一维数组(纯数字)按照距离 n 最近的顺序排序。(距离即数字与 n 的差值的绝对值)")])]),r("li",[r("a",{attrs:{href:"#找出两个数组的交集元素"}},[a._v("找出两个数组的交集元素")])]),r("li",[r("a",{attrs:{href:"#输入一个整数，输出该数二进制表示中-1-的个数"}},[a._v("输入一个整数，输出该数二进制表示中 1 的个数")])]),r("li",[r("a",{attrs:{href:"#⽤-js-实现随机选取-10-100-之间的-10-个且不重复的数字，存⼊⼀个数组，还要排序"}},[a._v("⽤ js 实现随机选取 10–100 之间的 10 个且不重复的数字，存⼊⼀个数组，还要排序")])]),r("li",[r("a",{attrs:{href:"#请用算法实现，从给定的无序、不重复的数组-data-中，取出-n-个数，使其相加和为-sum。并给出算法的时间-空间复杂度。-不需要找到所有的解，找到一个解即可"}},[a._v("请用算法实现，从给定的无序、不重复的数组 data 中，取出 n 个数，使其相加和为 sum。并给出算法的时间/空间复杂度。(不需要找到所有的解，找到一个解即可)")])]),r("li",[r("a",{attrs:{href:"#给定⼀个⼤⼩为-n-的数组，找到其中的众数。众数是指在数组中出现次数⼤于-⌊⌊-n-2-⌋⌋-的元素"}},[a._v("给定⼀个⼤⼩为 n 的数组，找到其中的众数。众数是指在数组中出现次数⼤于 ⌊⌊ n/2 ⌋⌋ 的元素")])])])]),r("p"),a._v(" "),r("h2",{attrs:{id:"合并二维有序数组成一维有序数组，归并排序的思路"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#合并二维有序数组成一维有序数组，归并排序的思路"}},[a._v("#")]),a._v(" 合并二维有序数组成一维有序数组，归并排序的思路")]),a._v(" "),r("h2",{attrs:{id:"多种方式实现斐波那契数列"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#多种方式实现斐波那契数列"}},[a._v("#")]),a._v(" 多种方式实现斐波那契数列")]),a._v(" "),r("h2",{attrs:{id:"字符串出现的不重复最长长度"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#字符串出现的不重复最长长度"}},[a._v("#")]),a._v(" 字符串出现的不重复最长长度")]),a._v(" "),r("h2",{attrs:{id:"有一堆整数，请把他们分成三份，确保每一份和尽量相等（11，42，23，4，5，6-4-5-6-11-23-42-56-78-90）"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#有一堆整数，请把他们分成三份，确保每一份和尽量相等（11，42，23，4，5，6-4-5-6-11-23-42-56-78-90）"}},[a._v("#")]),a._v(" 有一堆整数，请把他们分成三份，确保每一份和尽量相等（11，42，23，4，5，6 4 5 6 11 23 42 56 78 90）")]),a._v(" "),r("h2",{attrs:{id:"输入一条-polyline，输出-polyline-的中点"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#输入一条-polyline，输出-polyline-的中点"}},[a._v("#")]),a._v(" 输入一条 polyline，输出 polyline 的中点")]),a._v(" "),r("blockquote",[r("p",[a._v("算法：输入一条 polyline，输出 polyline 的中点\n绘制：在浏览器中绘制出 polyline 和中点\n说明：中点是指沿着 polyline，到 polyline 的起点和终点，距离相等，中点要求在 polyline 上\n输入：[[10, 20], [20, 200], [30, 220], [40, 300], [100, 400]]，以[10, 20]举例，10 代表 x 坐标，20 代表 y 坐标，单位是像素\n要求：提供源代码，用原生 JavaScript 实现，不使用任何框架、类库、构建工具，本地打开 html 文件可直接看到效果")])]),a._v(" "),r("h2",{attrs:{id:"单向链表实现队列"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#单向链表实现队列"}},[a._v("#")]),a._v(" 单向链表实现队列")]),a._v(" "),r("h2",{attrs:{id:"将给定的数组从顶级分类递归查找子分类，最终构建一个树状数组"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#将给定的数组从顶级分类递归查找子分类，最终构建一个树状数组"}},[a._v("#")]),a._v(" 将给定的数组从顶级分类递归查找子分类，最终构建一个树状数组")]),a._v(" "),r("blockquote",[r("p",[a._v("数组：[{id:1, parentId: 0}, {id:2, parentId:1},{id:3, parentId:1}]\n输出结果：[{id:1, parentId: 0,children:[{id:2, parentId:1},{id:3, parentId:1}]}]\n说明：parentId 为 0 的是根节点")])]),a._v(" "),r("h2",{attrs:{id:"实现一个将-52-张牌随机均等的分给四个人，比如输入-0-1-2-3-51-，输出-1-2-16-4-3-6"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#实现一个将-52-张牌随机均等的分给四个人，比如输入-0-1-2-3-51-，输出-1-2-16-4-3-6"}},[a._v("#")]),a._v(" 实现一个将 52 张牌随机均等的分给四个人，比如输入 [0,1,2,3....51] ，输出[[1,2,16...],[4,3,6..],[....],[....]]")]),a._v(" "),r("h2",{attrs:{id:"按要求实现-rightview-函数"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#按要求实现-rightview-函数"}},[a._v("#")]),a._v(" 按要求实现 rightView 函数")]),a._v(" "),r("div",{staticClass:"language-js line-numbers-mode"},[r("pre",{pre:!0,attrs:{class:"language-js"}},[r("code",[r("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("function")]),a._v(" "),r("span",{pre:!0,attrs:{class:"token function"}},[a._v("TreeNode")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),r("span",{pre:!0,attrs:{class:"token parameter"}},[a._v("val")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n  "),r("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("this")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("val "),r("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" val"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n  "),r("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("this")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("left "),r("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),r("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("null")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n  "),r("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("this")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("right "),r("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),r("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("null")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),r("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("function")]),a._v(" "),r("span",{pre:!0,attrs:{class:"token function"}},[a._v("rightView")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),r("span",{pre:!0,attrs:{class:"token parameter"}},[a._v("root")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n  "),r("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 请你实现")]),a._v("\n"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),r("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// => [1,4,3]")]),a._v("\n     "),r("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v("      "),r("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=>")]),a._v(" "),r("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v("\n   "),r("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),a._v("   "),r("span",{pre:!0,attrs:{class:"token number"}},[a._v("4")]),a._v("    "),r("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=>")]),a._v(" "),r("span",{pre:!0,attrs:{class:"token number"}},[a._v("4")]),a._v("\n "),r("span",{pre:!0,attrs:{class:"token number"}},[a._v("7")]),a._v("   "),r("span",{pre:!0,attrs:{class:"token number"}},[a._v("3")]),a._v("      "),r("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=>")]),a._v(" "),r("span",{pre:!0,attrs:{class:"token number"}},[a._v("3")]),a._v("\n")])]),a._v(" "),r("div",{staticClass:"line-numbers-wrapper"},[r("span",{staticClass:"line-number"},[a._v("1")]),r("br"),r("span",{staticClass:"line-number"},[a._v("2")]),r("br"),r("span",{staticClass:"line-number"},[a._v("3")]),r("br"),r("span",{staticClass:"line-number"},[a._v("4")]),r("br"),r("span",{staticClass:"line-number"},[a._v("5")]),r("br"),r("span",{staticClass:"line-number"},[a._v("6")]),r("br"),r("span",{staticClass:"line-number"},[a._v("7")]),r("br"),r("span",{staticClass:"line-number"},[a._v("8")]),r("br"),r("span",{staticClass:"line-number"},[a._v("9")]),r("br"),r("span",{staticClass:"line-number"},[a._v("10")]),r("br"),r("span",{staticClass:"line-number"},[a._v("11")]),r("br"),r("span",{staticClass:"line-number"},[a._v("12")]),r("br")])]),r("h2",{attrs:{id:"二叉树序列化反序列化"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#二叉树序列化反序列化"}},[a._v("#")]),a._v(" 二叉树序列化反序列化")]),a._v(" "),r("h2",{attrs:{id:"输入一个数字，找到对应的字母"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#输入一个数字，找到对应的字母"}},[a._v("#")]),a._v(" 输入一个数字，找到对应的字母")]),a._v(" "),r("blockquote",[r("div",{staticClass:"language- extra-class"},[r("pre",[r("code",[a._v("如输入1 返回a\n")])])])]),a._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",[r("code",[a._v("输入26返回z\n输入27返回aa\n输入28返回ab\n输入53返回aaa\n")])])]),r("h2",{attrs:{id:"给一个字符串比如-abca-，返回第一个不重复的字母"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#给一个字符串比如-abca-，返回第一个不重复的字母"}},[a._v("#")]),a._v(" 给一个字符串比如'abca'，返回第一个不重复的字母")]),a._v(" "),r("h2",{attrs:{id:"给定⼀个只包括-，-，-，-，-，-的字符串，判断字符串是否有效"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#给定⼀个只包括-，-，-，-，-，-的字符串，判断字符串是否有效"}},[a._v("#")]),a._v(" 给定⼀个只包括 '('，')'，'{'，'}'，'['，']' 的字符串，判断字符串是否有效.")]),a._v(" "),r("blockquote",[r("p",[a._v('有效字符串需满⾜： 1. 左括号必须⽤相同类型的右括号闭合。 2. 左括号必须以正确的顺序闭合。\n注意空字符串可被认为是有效字符串。\n示例 1：\n输⼊: "()"\n输出: true\n示例 2：\n输⼊: "()[]{}"\n输出: true\n示例 3:\n输⼊: "(]"\n输出: false\n示例 4:\n输⼊: "([)]"\n输出: false\n示例 5:\n输⼊: "{[]}"\n输出: true')])]),a._v(" "),r("h2",{attrs:{id:"手动实现一个函数，给定一个数组-1-0-2-3-4-1-3-，输出任意两个值和为-0-的下标"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#手动实现一个函数，给定一个数组-1-0-2-3-4-1-3-，输出任意两个值和为-0-的下标"}},[a._v("#")]),a._v(" 手动实现一个函数，给定一个数组[1,0,2,3,4,-1,-3]，输出任意两个值和为 0 的下标")]),a._v(" "),r("h2",{attrs:{id:"介绍排序算法和快排原理"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#介绍排序算法和快排原理"}},[a._v("#")]),a._v(" 介绍排序算法和快排原理")]),a._v(" "),r("h2",{attrs:{id:"一个人每次只能走一层楼梯或者两层楼梯，问走到第-80-层楼梯一共有多少种方法"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#一个人每次只能走一层楼梯或者两层楼梯，问走到第-80-层楼梯一共有多少种方法"}},[a._v("#")]),a._v(" 一个人每次只能走一层楼梯或者两层楼梯，问走到第 80 层楼梯一共有多少种方法")]),a._v(" "),r("h2",{attrs:{id:"给定一个数组，形如-1-1-2-3-3-3-3-4-6-6-，给定一个数-n，例如-3，找出给定的数-n-在数组内出现的次数，要求时间复杂度小于-o-n"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#给定一个数组，形如-1-1-2-3-3-3-3-4-6-6-，给定一个数-n，例如-3，找出给定的数-n-在数组内出现的次数，要求时间复杂度小于-o-n"}},[a._v("#")]),a._v(" 给定一个数组，形如 [1, 1, 2 , 3, 3, 3, 3, 4, 6, 6]，给定一个数 n，例如 3，找出给定的数 n 在数组内出现的次数，要求时间复杂度小于 O(n)")]),a._v(" "),r("h2",{attrs:{id:"现在有随机整数数组，例如-2-11-20-160-3-1-，请挑出数组内，三个随机整数和为-100-的所有数据。"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#现在有随机整数数组，例如-2-11-20-160-3-1-，请挑出数组内，三个随机整数和为-100-的所有数据。"}},[a._v("#")]),a._v(" 现在有随机整数数组，例如[2,11,20,160,3,1...]，请挑出数组内，三个随机整数和为 100 的所有数据。")]),a._v(" "),r("h2",{attrs:{id:"统计一组整形数组的最大差值？"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#统计一组整形数组的最大差值？"}},[a._v("#")]),a._v(" 统计一组整形数组的最大差值？")]),a._v(" "),r("h2",{attrs:{id:"介绍冒泡排序、选择排序，说说冒泡排序如何优化"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#介绍冒泡排序、选择排序，说说冒泡排序如何优化"}},[a._v("#")]),a._v(" 介绍冒泡排序、选择排序，说说冒泡排序如何优化")]),a._v(" "),r("h2",{attrs:{id:"如何判断链表是否有环"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#如何判断链表是否有环"}},[a._v("#")]),a._v(" 如何判断链表是否有环")]),a._v(" "),r("h2",{attrs:{id:"介绍二叉搜索树的特点"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#介绍二叉搜索树的特点"}},[a._v("#")]),a._v(" 介绍二叉搜索树的特点")]),a._v(" "),r("h2",{attrs:{id:"手写数组去重函数-至少三种以上，说明时间复杂度"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#手写数组去重函数-至少三种以上，说明时间复杂度"}},[a._v("#")]),a._v(" 手写数组去重函数(至少三种以上，说明时间复杂度)")]),a._v(" "),r("h2",{attrs:{id:"找到前-k-个最大的元素"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#找到前-k-个最大的元素"}},[a._v("#")]),a._v(" 找到前 K 个最大的元素")]),a._v(" "),r("h2",{attrs:{id:"介绍下-dfs-深度优先"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#介绍下-dfs-深度优先"}},[a._v("#")]),a._v(" 介绍下 DFS 深度优先")]),a._v(" "),r("h2",{attrs:{id:"递归公式的时间复杂度为？-单选题"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#递归公式的时间复杂度为？-单选题"}},[a._v("#")]),a._v(" 递归公式的时间复杂度为？(单选题)")]),a._v(" "),r("blockquote",[r("p",[a._v("A.O(n)\nB.O(logn)\nC.O(nlogn)\nD.O(n2)")])]),a._v(" "),r("h2",{attrs:{id:"用-javascript-实现一个标准的排序算法-快排、冒泡、选择排序-，对某个数字数组进行由低到高的排序。"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#用-javascript-实现一个标准的排序算法-快排、冒泡、选择排序-，对某个数字数组进行由低到高的排序。"}},[a._v("#")]),a._v(" 用 JavaScript 实现一个标准的排序算法(快排、冒泡、选择排序)，对某个数字数组进行由低到高的排序。")]),a._v(" "),r("h2",{attrs:{id:"找出-aaaabbcccdddd-字符串中出现最多的字母？"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#找出-aaaabbcccdddd-字符串中出现最多的字母？"}},[a._v("#")]),a._v(" 找出“aaaabbcccdddd”字符串中出现最多的字母？")]),a._v(" "),r("h2",{attrs:{id:"求-n-以内的所有素数，并说明时间复杂度"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#求-n-以内的所有素数，并说明时间复杂度"}},[a._v("#")]),a._v(" 求 n 以内的所有素数，并说明时间复杂度")]),a._v(" "),r("h2",{attrs:{id:"给定一个二叉树，找出其最大深度。二叉树的深度为根节点到最远叶子节点的最长路径上的节点数。说明-叶子节点是指没有子节点的节点"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#给定一个二叉树，找出其最大深度。二叉树的深度为根节点到最远叶子节点的最长路径上的节点数。说明-叶子节点是指没有子节点的节点"}},[a._v("#")]),a._v(" 给定一个二叉树，找出其最大深度。二叉树的深度为根节点到最远叶子节点的最长路径上的节点数。说明: 叶子节点是指没有子节点的节点")]),a._v(" "),r("h2",{attrs:{id:"给定一个整数数组-nums，找到一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#给定一个整数数组-nums，找到一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和"}},[a._v("#")]),a._v(" 给定一个整数数组 nums，找到一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和")]),a._v(" "),r("h2",{attrs:{id:"根据传入参数-n-数字-对一维数组-纯数字-按照距离-n-最近的顺序排序。-距离即数字与-n-的差值的绝对值"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#根据传入参数-n-数字-对一维数组-纯数字-按照距离-n-最近的顺序排序。-距离即数字与-n-的差值的绝对值"}},[a._v("#")]),a._v(" 根据传入参数 n(数字)对一维数组(纯数字)按照距离 n 最近的顺序排序。(距离即数字与 n 的差值的绝对值)")]),a._v(" "),r("div",{staticClass:"language-js line-numbers-mode"},[r("pre",{pre:!0,attrs:{class:"language-js"}},[r("code",[r("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("var")]),a._v(" arr "),r("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),r("span",{pre:!0,attrs:{class:"token number"}},[a._v("7")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),r("span",{pre:!0,attrs:{class:"token number"}},[a._v("28")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),r("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),r("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),r("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),r("span",{pre:!0,attrs:{class:"token number"}},[a._v("7")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),r("span",{pre:!0,attrs:{class:"token number"}},[a._v("33")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n"),r("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("function")]),a._v(" "),r("span",{pre:!0,attrs:{class:"token function"}},[a._v("sort")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),r("span",{pre:!0,attrs:{class:"token parameter"}},[a._v("n")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n  "),r("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// your code")]),a._v("\n"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])]),a._v(" "),r("div",{staticClass:"line-numbers-wrapper"},[r("span",{staticClass:"line-number"},[a._v("1")]),r("br"),r("span",{staticClass:"line-number"},[a._v("2")]),r("br"),r("span",{staticClass:"line-number"},[a._v("3")]),r("br"),r("span",{staticClass:"line-number"},[a._v("4")]),r("br")])]),r("h2",{attrs:{id:"找出两个数组的交集元素"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#找出两个数组的交集元素"}},[a._v("#")]),a._v(" 找出两个数组的交集元素")]),a._v(" "),r("h2",{attrs:{id:"输入一个整数，输出该数二进制表示中-1-的个数"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#输入一个整数，输出该数二进制表示中-1-的个数"}},[a._v("#")]),a._v(" 输入一个整数，输出该数二进制表示中 1 的个数")]),a._v(" "),r("h2",{attrs:{id:"⽤-js-实现随机选取-10-100-之间的-10-个且不重复的数字，存⼊⼀个数组，还要排序"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#⽤-js-实现随机选取-10-100-之间的-10-个且不重复的数字，存⼊⼀个数组，还要排序"}},[a._v("#")]),a._v(" ⽤ js 实现随机选取 10–100 之间的 10 个且不重复的数字，存⼊⼀个数组，还要排序")]),a._v(" "),r("h2",{attrs:{id:"请用算法实现，从给定的无序、不重复的数组-data-中，取出-n-个数，使其相加和为-sum。并给出算法的时间-空间复杂度。-不需要找到所有的解，找到一个解即可"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#请用算法实现，从给定的无序、不重复的数组-data-中，取出-n-个数，使其相加和为-sum。并给出算法的时间-空间复杂度。-不需要找到所有的解，找到一个解即可"}},[a._v("#")]),a._v(" 请用算法实现，从给定的无序、不重复的数组 data 中，取出 n 个数，使其相加和为 sum。并给出算法的时间/空间复杂度。(不需要找到所有的解，找到一个解即可)")]),a._v(" "),r("h2",{attrs:{id:"给定⼀个⼤⼩为-n-的数组，找到其中的众数。众数是指在数组中出现次数⼤于-⌊⌊-n-2-⌋⌋-的元素"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#给定⼀个⼤⼩为-n-的数组，找到其中的众数。众数是指在数组中出现次数⼤于-⌊⌊-n-2-⌋⌋-的元素"}},[a._v("#")]),a._v(" 给定⼀个⼤⼩为 n 的数组，找到其中的众数。众数是指在数组中出现次数⼤于 ⌊⌊ n/2 ⌋⌋ 的元素")])])}),[],!1,null,null,null);t.default=n.exports}}]);